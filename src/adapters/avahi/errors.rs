use std::error::Error as StdError;
use std::fmt::{Display, Formatter};

use adapters::avahi::utils::*;
use bindings::avahi::*;

#[derive(Debug)]
pub enum Error {
    Failure(i32, String),
    BadState(i32, String),
    InvalidHostName(i32, String),
    InvalidDomainName(i32, String),
    NoNetwork(i32, String),
    InvalidTTL(i32, String),
    IsPattern(i32, String),
    Collision(i32, String),
    InvalidRecord(i32, String),
    InvalidServiceName(i32, String),
    InvalidServiceType(i32, String),
    InvalidPort(i32, String),
    InvalidKey(i32, String),
    InvalidAddress(i32, String),
    Timeout(i32, String),
    TooManyClients(i32, String),
    TooManyObjects(i32, String),
    TooManyEntries(i32, String),
    OS(i32, String),
    AccessDenied(i32, String),
    InvalidOperation(i32, String),
    DBusError(i32, String),
    Disconnected(i32, String),
    NoMemory(i32, String),
    InvalidObject(i32, String),
    NoDaemon(i32, String),
    InvalidInterface(i32, String),
    InvalidProtocol(i32, String),
    InvalidFlags(i32, String),
    NotFound(i32, String),
    InvalidConfig(i32, String),
    VersionMismatch(i32, String),
    InvalidServiceSubType(i32, String),
    InvalidPacket(i32, String),
    InvalidDnsError(i32, String),
    DnsFormError(i32, String),
    DnsServiceFail(i32, String),
    DnsNxDomain(i32, String),
    DnsNotImp(i32, String),
    DnsRefused(i32, String),
    DnsYxDomain(i32, String),
    DnsYxRrSet(i32, String),
    DnsNxRrSet(i32, String),
    DnsNotAuth(i32, String),
    DnsNotZone(i32, String),
    InvalidRData(i32, String),
    InvalidDnsClass(i32, String),
    InvalidDnsType(i32, String),
    NotSupported(i32, String),
    NotPermitted(i32, String),
    InvalidArgument(i32, String),
    IsEmpty(i32, String),
    NoChange(i32, String),
    Max(i32, String),
    Unknown(i32, String),
}

impl Display for Error {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.write_str(match *self {
            Error::Failure(_, ref message) => message,
            Error::BadState(_, ref message) => message,
            Error::InvalidHostName(_, ref message) => message,
            Error::InvalidDomainName(_, ref message) => message,
            Error::NoNetwork(_, ref message) => message,
            Error::InvalidTTL(_, ref message) => message,
            Error::IsPattern(_, ref message) => message,
            Error::Collision(_, ref message) => message,
            Error::InvalidRecord(_, ref message) => message,
            Error::InvalidServiceName(_, ref message) => message,
            Error::InvalidServiceType(_, ref message) => message,
            Error::InvalidPort(_, ref message) => message,
            Error::InvalidKey(_, ref message) => message,
            Error::InvalidAddress(_, ref message) => message,
            Error::Timeout(_, ref message) => message,
            Error::TooManyClients(_, ref message) => message,
            Error::TooManyObjects(_, ref message) => message,
            Error::TooManyEntries(_, ref message) => message,
            Error::OS(_, ref message) => message,
            Error::AccessDenied(_, ref message) => message,
            Error::InvalidOperation(_, ref message) => message,
            Error::DBusError(_, ref message) => message,
            Error::Disconnected(_, ref message) => message,
            Error::NoMemory(_, ref message) => message,
            Error::InvalidObject(_, ref message) => message,
            Error::NoDaemon(_, ref message) => message,
            Error::InvalidInterface(_, ref message) => message,
            Error::InvalidProtocol(_, ref message) => message,
            Error::InvalidFlags(_, ref message) => message,
            Error::NotFound(_, ref message) => message,
            Error::InvalidConfig(_, ref message) => message,
            Error::VersionMismatch(_, ref message) => message,
            Error::InvalidServiceSubType(_, ref message) => message,
            Error::InvalidPacket(_, ref message) => message,
            Error::InvalidDnsError(_, ref message) => message,
            Error::DnsFormError(_, ref message) => message,
            Error::DnsServiceFail(_, ref message) => message,
            Error::DnsNxDomain(_, ref message) => message,
            Error::DnsNotImp(_, ref message) => message,
            Error::DnsRefused(_, ref message) => message,
            Error::DnsYxDomain(_, ref message) => message,
            Error::DnsYxRrSet(_, ref message) => message,
            Error::DnsNxRrSet(_, ref message) => message,
            Error::DnsNotAuth(_, ref message) => message,
            Error::DnsNotZone(_, ref message) => message,
            Error::InvalidRData(_, ref message) => message,
            Error::InvalidDnsClass(_, ref message) => message,
            Error::InvalidDnsType(_, ref message) => message,
            Error::NotSupported(_, ref message) => message,
            Error::NotPermitted(_, ref message) => message,
            Error::InvalidArgument(_, ref message) => message,
            Error::IsEmpty(_, ref message) => message,
            Error::NoChange(_, ref message) => message,
            Error::Max(_, ref message) => message,
            Error::Unknown(_, ref message) => message,
        })
    }
}

impl StdError for Error {
    fn cause(&self) -> Option<&dyn StdError> {
        None
    }
}

impl Error {
    pub fn from_error_code(error_code: i32) -> Error {
        let error_string = AvahiUtils::to_owned_string(unsafe { avahi_strerror(error_code) })
            .unwrap_or_else(|| "Description is not available.".to_owned());

        match error_code {
            -1 => Error::Failure(error_code, error_string),
            -2 => Error::BadState(error_code, error_string),
            -3 => Error::InvalidHostName(error_code, error_string),
            -4 => Error::InvalidDomainName(error_code, error_string),
            -5 => Error::NoNetwork(error_code, error_string),
            -6 => Error::InvalidTTL(error_code, error_string),
            -7 => Error::IsPattern(error_code, error_string),
            -8 => Error::Collision(error_code, error_string),
            -9 => Error::InvalidRecord(error_code, error_string),
            -10 => Error::InvalidServiceName(error_code, error_string),
            -11 => Error::InvalidServiceType(error_code, error_string),
            -12 => Error::InvalidPort(error_code, error_string),
            -13 => Error::InvalidKey(error_code, error_string),
            -14 => Error::InvalidAddress(error_code, error_string),
            -15 => Error::Timeout(error_code, error_string),
            -16 => Error::TooManyClients(error_code, error_string),
            -17 => Error::TooManyObjects(error_code, error_string),
            -18 => Error::TooManyEntries(error_code, error_string),
            -19 => Error::OS(error_code, error_string),
            -20 => Error::AccessDenied(error_code, error_string),
            -21 => Error::InvalidOperation(error_code, error_string),
            -22 => Error::DBusError(error_code, error_string),
            -23 => Error::Disconnected(error_code, error_string),
            -24 => Error::NoMemory(error_code, error_string),
            -25 => Error::InvalidObject(error_code, error_string),
            -26 => Error::NoDaemon(error_code, error_string),
            -27 => Error::InvalidInterface(error_code, error_string),
            -28 => Error::InvalidProtocol(error_code, error_string),
            -29 => Error::InvalidFlags(error_code, error_string),
            -30 => Error::NotFound(error_code, error_string),
            -31 => Error::InvalidConfig(error_code, error_string),
            -32 => Error::VersionMismatch(error_code, error_string),
            -33 => Error::InvalidServiceSubType(error_code, error_string),
            -34 => Error::InvalidPacket(error_code, error_string),
            -35 => Error::InvalidDnsError(error_code, error_string),
            -36 => Error::DnsFormError(error_code, error_string),
            -37 => Error::DnsServiceFail(error_code, error_string),
            -38 => Error::DnsNxDomain(error_code, error_string),
            -39 => Error::DnsNotImp(error_code, error_string),
            -40 => Error::DnsRefused(error_code, error_string),
            -41 => Error::DnsYxDomain(error_code, error_string),
            -42 => Error::DnsYxRrSet(error_code, error_string),
            -43 => Error::DnsNxRrSet(error_code, error_string),
            -44 => Error::DnsNotAuth(error_code, error_string),
            -45 => Error::DnsNotZone(error_code, error_string),
            -46 => Error::InvalidRData(error_code, error_string),
            -47 => Error::InvalidDnsClass(error_code, error_string),
            -48 => Error::InvalidDnsType(error_code, error_string),
            -49 => Error::NotSupported(error_code, error_string),
            -50 => Error::NotPermitted(error_code, error_string),
            -51 => Error::InvalidArgument(error_code, error_string),
            -52 => Error::IsEmpty(error_code, error_string),
            -53 => Error::NoChange(error_code, error_string),
            -54 => Error::Max(error_code, error_string),
            _ => Error::Unknown(error_code, error_string),
        }
    }
}
